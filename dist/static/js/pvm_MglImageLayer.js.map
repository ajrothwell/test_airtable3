{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/ImageLayer.js"],"names":["mapboxSourceProps","sourceId","type","String","required","source","Object","default","undefined","mapboxLayerStyleProps","layerId","layer","before","componentProps","clearSource","Boolean","replaceSource","replace","mixins","withEvents","props","inject","data","initial","computed","sourceLoaded","this","map","isSourceLoaded","mapLayer","getLayer","mapSource","getSource","created","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","keys","prop","setPaintProperty","deep","layout","setLayoutProperty","filter","setFilter","beforeDestroy","removeLayer","err","$_emitEvent","error","removeSource","methods","$_emitLayerMapEvent","event","$_emitMapEvent","$_bindLayerEvents","events","$listeners","forEach","eventName","includes","on","$_unbindEvents","off","$_watchSourceLoading","dataType","move","beforeId","moveLayer","remove","$destroy","render","name","$emit","component","mapboxEvent","mixin","coordinates","setCoordinates","url","updateImage","$_deferredMount","addSource","$_addLayer","layerEvents","existed","id","console","log","addLayer"],"mappings":"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","file":"static/js/pvm_MglImageLayer.js","sourcesContent":["// import withRegistration from \"../../lib/withRegistration\";\r\nimport withEvents from \"../lib/withEvents\";\r\n\r\nconst mapboxSourceProps = {\r\n  sourceId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  source: {\r\n    type: [ Object, String ],\r\n    default: undefined,\r\n  },\r\n};\r\n\r\nconst mapboxLayerStyleProps = {\r\n  layerId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  layer: {\r\n    type: Object,\r\n    required: true,\r\n  },\r\n  before: {\r\n    type: String,\r\n    default: undefined,\r\n  },\r\n};\r\n\r\nconst componentProps = {\r\n  clearSource: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n  replaceSource: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  replace: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n};\r\n\r\nexport default {\r\n  mixins: [ withEvents ],\r\n  props: {\r\n    ...mapboxSourceProps,\r\n    ...mapboxLayerStyleProps,\r\n    ...componentProps,\r\n  },\r\n\r\n  inject: [ \"mapbox\", \"map\" ],\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    sourceLoaded() {\r\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\r\n    },\r\n    mapLayer() {\r\n      return this.map ? this.map.getLayer(this.layerId) : null;\r\n    },\r\n    mapSource() {\r\n      return this.map ? this.map.getSource(this.sourceId) : null;\r\n    },\r\n  },\r\n\r\n  created() {\r\n    if (this.layer.minzoom) {\r\n      this.$watch(\"layer.minzoom\", function(next) {\r\n        if (this.initial) {\r\n          return;\r\n        }\r\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\r\n      });\r\n    }\r\n\r\n    if (this.layer.maxzoom) {\r\n      this.$watch(\"layer.maxzoom\", function(next) {\r\n        if (this.initial) {\r\n          return;\r\n        }\r\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\r\n      });\r\n    }\r\n\r\n    if (this.layer.paint) {\r\n      this.$watch(\r\n        \"layer.paint\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          if (next) {\r\n            for (let prop of Object.keys(next)) {\r\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\r\n            }\r\n          }\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    if (this.layer.layout) {\r\n      this.$watch(\r\n        \"layer.layout\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          if (next) {\r\n            for (let prop of Object.keys(next)) {\r\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\r\n            }\r\n          }\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    if (this.layer.filter) {\r\n      this.$watch(\r\n        \"layer.filter\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          this.map.setFilter(this.layerId, next);\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    // if (this.layer.tiles) {\r\n    //   this.$watch(\r\n    //     \"layer\",\r\n    //     function(next) {\r\n    //       console.log('watch layer tiles is firing, next:', next);\r\n    //       if (this.initial) return;\r\n    //       // this.map.removeLayer(this.layerId);\r\n    //       this.map.addLayer(next);\r\n    //       // this.map.setFilter(this.layerId, next);\r\n    //     },\r\n    //     { deep: true }\r\n    //   );\r\n    // }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // console.log('layerMixin beforeDestroy is running, this.layerId:', this.layerId, 'this.clearSource:', this.clearSource, 'this.map:', this.map, 'this.map.loaded():', this.map.loaded());\r\n    // if (this.map && this.map.loaded()) {\r\n    try {\r\n      // console.log('layerMixin beforeDestroy if map and maploaded try is running')\r\n      this.map.removeLayer(this.layerId);\r\n    } catch (err) {\r\n      // console.log('layerMixin beforeDestroy error 1 is running')\r\n      this.$_emitEvent(\"layer-does-not-exist\", {\r\n        layerId: this.sourceId,\r\n        error: err,\r\n      });\r\n    }\r\n    if (this.clearSource) {\r\n      // console.log('layerMixin beforeDestroy if clearSource is running')\r\n      try {\r\n        // console.log('layerMixin beforeDestroy if clearSource try is running');\r\n        this.map.removeSource(this.sourceId);\r\n      } catch (err) {\r\n        this.$_emitEvent(\"source-does-not-exist\", {\r\n          sourceId: this.sourceId,\r\n          error: err,\r\n        });\r\n      }\r\n    }\r\n    // }\r\n  },\r\n\r\n  methods: {\r\n    $_emitLayerMapEvent(event) {\r\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\r\n    },\r\n\r\n    $_bindLayerEvents(events) {\r\n      Object.keys(this.$listeners).forEach(eventName => {\r\n        if (events.includes(eventName)) {\r\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\r\n        }\r\n      });\r\n    },\r\n\r\n    $_unbindEvents(events) {\r\n      if (this.map) {\r\n        events.forEach(eventName => {\r\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\r\n        });\r\n      }\r\n    },\r\n\r\n    $_watchSourceLoading(data) {\r\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\r\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\r\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\r\n      }\r\n    },\r\n\r\n    move(beforeId) {\r\n      this.map.moveLayer(this.layerId, beforeId);\r\n      this.$_emitEvent(\"layer-moved\", {\r\n        layerId: this.layerId,\r\n        beforeId: beforeId,\r\n      });\r\n    },\r\n\r\n    remove() {\r\n      this.map.removeLayer(this.layerId);\r\n      this.map.removeSource(this.sourceId);\r\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\r\n      this.$destroy();\r\n    },\r\n  },\r\n\r\n  render() {},\r\n};\r\n","export default {\r\n  methods: {\r\n    /**\r\n     * Emit Vue event with additional data\r\n     *\r\n     * @param {string} name EventName\r\n     * @param {Object} [data={}] Additional data\r\n     */\r\n    $_emitEvent(name, data = {}) {\r\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\r\n      this.$emit(name, {\r\n        map: this.map,\r\n        component: this,\r\n        ...data,\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Emit Vue event with Mapbox event as additional data\r\n     *\r\n     * @param {Object} event\r\n     */\r\n    $_emitMapEvent(event, data = {}) {\r\n      // console.log('withEvents.js, $_emitMapEvent is running');\r\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\r\n    },\r\n  },\r\n};\r\n","export default [\r\n  \"mousedown\",\r\n  \"mouseup\",\r\n  \"click\",\r\n  \"dblclick\",\r\n  \"mousemove\",\r\n  \"mouseenter\",\r\n  \"mouseleave\",\r\n  \"mouseover\",\r\n  \"mouseout\",\r\n  \"contextmenu\",\r\n  \"touchstart\",\r\n  \"touchend\",\r\n  \"touchcancel\",\r\n];\r\n","import mixin from \"./layerMixin\";\r\nimport layerEvents from \"../lib/layerEvents\";\r\n\r\nexport default {\r\n  name: \"ImageLayer\",\r\n  mixins: [ mixin ],\r\n\r\n  created() {\r\n    if (this.source) {\r\n      if (this.source.coordinates) {\r\n        this.$watch(\r\n          \"source.coordinates\",\r\n          function(next) {\r\n            if (this.initial) {\r\n              return;\r\n            }\r\n            if (next) {\r\n              this.mapSource.setCoordinates(next);\r\n            }\r\n          },\r\n          { deep: true },\r\n        );\r\n      }\r\n\r\n      if (this.source.url) {\r\n        this.$watch(\r\n          \"source.url\",\r\n          function(next) {\r\n            if (this.initial) {\r\n              return;\r\n            }\r\n            if (next) {\r\n              this.mapSource.updateImage({\r\n                url: next,\r\n                coordinates: this.source.coordinates,\r\n              });\r\n            }\r\n          },\r\n          { deep: true },\r\n        );\r\n      }\r\n    }\r\n    this.$_deferredMount();\r\n  },\r\n\r\n  methods: {\r\n    $_deferredMount() {\r\n      const source = {\r\n        type: \"image\",\r\n        ...this.source,\r\n      };\r\n\r\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\r\n      try {\r\n        this.map.addSource(this.sourceId, source);\r\n      } catch (err) {\r\n        if (this.replaceSource) {\r\n          this.map.removeSource(this.sourceId);\r\n          this.map.addSource(this.sourceId, source);\r\n        }\r\n      }\r\n      this.$_addLayer();\r\n      this.$_bindLayerEvents(layerEvents);\r\n      this.initial = false;\r\n    },\r\n\r\n    $_addLayer() {\r\n      let existed = this.map.getLayer(this.layerId);\r\n      if (existed) {\r\n        if (this.replace) {\r\n          this.map.removeLayer(this.layerId);\r\n        } else {\r\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\r\n          return existed;\r\n        }\r\n      }\r\n      const layer = {\r\n        id: this.layerId,\r\n        source: this.sourceId,\r\n        type: \"raster\",\r\n        ...this.layer,\r\n      };\r\n\r\n      console.log('$_addLayer, layer:', layer);\r\n\r\n      this.map.addLayer(layer, this.before);\r\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}