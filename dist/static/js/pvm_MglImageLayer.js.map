{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/ImageLayer.js"],"names":["mapboxSourceProps","sourceId","type","String","required","source","Object","default","undefined","mapboxLayerStyleProps","layerId","layer","before","componentProps","clearSource","Boolean","replaceSource","replace","mixins","withEvents","props","inject","data","initial","computed","sourceLoaded","this","map","isSourceLoaded","mapLayer","getLayer","mapSource","getSource","created","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","keys","prop","setPaintProperty","deep","layout","setLayoutProperty","filter","setFilter","beforeDestroy","removeLayer","err","$_emitEvent","error","removeSource","methods","$_emitLayerMapEvent","event","$_emitMapEvent","$_bindLayerEvents","events","$listeners","forEach","eventName","includes","on","$_unbindEvents","off","$_watchSourceLoading","dataType","move","beforeId","moveLayer","remove","$destroy","render","name","$emit","component","mapboxEvent","mixin","coordinates","setCoordinates","url","updateImage","$_deferredMount","addSource","$_addLayer","layerEvents","existed","id","console","log","addLayer"],"mappings":"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","file":"static/js/pvm_MglImageLayer.js","sourcesContent":["// import withRegistration from \"../../lib/withRegistration\";\nimport withEvents from \"../lib/withEvents\";\n\nconst mapboxSourceProps = {\n  sourceId: {\n    type: String,\n    required: true,\n  },\n  source: {\n    type: [ Object, String ],\n    default: undefined,\n  },\n};\n\nconst mapboxLayerStyleProps = {\n  layerId: {\n    type: String,\n    required: true,\n  },\n  layer: {\n    type: Object,\n    required: true,\n  },\n  before: {\n    type: String,\n    default: undefined,\n  },\n};\n\nconst componentProps = {\n  clearSource: {\n    type: Boolean,\n    default: true,\n  },\n  replaceSource: {\n    type: Boolean,\n    default: false,\n  },\n  replace: {\n    type: Boolean,\n    default: false,\n  },\n};\n\nexport default {\n  mixins: [ withEvents ],\n  props: {\n    ...mapboxSourceProps,\n    ...mapboxLayerStyleProps,\n    ...componentProps,\n  },\n\n  inject: [ \"mapbox\", \"map\" ],\n\n  data() {\n    return {\n      initial: true,\n    };\n  },\n\n  computed: {\n    sourceLoaded() {\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\n    },\n    mapLayer() {\n      return this.map ? this.map.getLayer(this.layerId) : null;\n    },\n    mapSource() {\n      return this.map ? this.map.getSource(this.sourceId) : null;\n    },\n  },\n\n  created() {\n    if (this.layer.minzoom) {\n      this.$watch(\"layer.minzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\n      });\n    }\n\n    if (this.layer.maxzoom) {\n      this.$watch(\"layer.maxzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\n      });\n    }\n\n    if (this.layer.paint) {\n      this.$watch(\n        \"layer.paint\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.layout) {\n      this.$watch(\n        \"layer.layout\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.filter) {\n      this.$watch(\n        \"layer.filter\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          this.map.setFilter(this.layerId, next);\n        },\n        { deep: true },\n      );\n    }\n\n    // if (this.layer.tiles) {\n    //   this.$watch(\n    //     \"layer\",\n    //     function(next) {\n    //       console.log('watch layer tiles is firing, next:', next);\n    //       if (this.initial) return;\n    //       // this.map.removeLayer(this.layerId);\n    //       this.map.addLayer(next);\n    //       // this.map.setFilter(this.layerId, next);\n    //     },\n    //     { deep: true }\n    //   );\n    // }\n  },\n\n  beforeDestroy() {\n    // console.log('layerMixin beforeDestroy is running, this.layerId:', this.layerId, 'this.clearSource:', this.clearSource, 'this.map:', this.map, 'this.map.loaded():', this.map.loaded());\n    // if (this.map && this.map.loaded()) {\n    try {\n      // console.log('layerMixin beforeDestroy if map and maploaded try is running')\n      this.map.removeLayer(this.layerId);\n    } catch (err) {\n      // console.log('layerMixin beforeDestroy error 1 is running')\n      this.$_emitEvent(\"layer-does-not-exist\", {\n        layerId: this.sourceId,\n        error: err,\n      });\n    }\n    if (this.clearSource) {\n      // console.log('layerMixin beforeDestroy if clearSource is running')\n      try {\n        // console.log('layerMixin beforeDestroy if clearSource try is running');\n        this.map.removeSource(this.sourceId);\n      } catch (err) {\n        this.$_emitEvent(\"source-does-not-exist\", {\n          sourceId: this.sourceId,\n          error: err,\n        });\n      }\n    }\n    // }\n  },\n\n  methods: {\n    $_emitLayerMapEvent(event) {\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\n    },\n\n    $_bindLayerEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      if (this.map) {\n        events.forEach(eventName => {\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\n        });\n      }\n    },\n\n    $_watchSourceLoading(data) {\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      }\n    },\n\n    move(beforeId) {\n      this.map.moveLayer(this.layerId, beforeId);\n      this.$_emitEvent(\"layer-moved\", {\n        layerId: this.layerId,\n        beforeId: beforeId,\n      });\n    },\n\n    remove() {\n      this.map.removeLayer(this.layerId);\n      this.map.removeSource(this.sourceId);\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\n      this.$destroy();\n    },\n  },\n\n  render() {},\n};\n","export default {\n  methods: {\n    /**\n     * Emit Vue event with additional data\n     *\n     * @param {string} name EventName\n     * @param {Object} [data={}] Additional data\n     */\n    $_emitEvent(name, data = {}) {\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\n      this.$emit(name, {\n        map: this.map,\n        component: this,\n        ...data,\n      });\n    },\n\n    /**\n     * Emit Vue event with Mapbox event as additional data\n     *\n     * @param {Object} event\n     */\n    $_emitMapEvent(event, data = {}) {\n      // console.log('withEvents.js, $_emitMapEvent is running');\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\n    },\n  },\n};\n","export default [\n  \"mousedown\",\n  \"mouseup\",\n  \"click\",\n  \"dblclick\",\n  \"mousemove\",\n  \"mouseenter\",\n  \"mouseleave\",\n  \"mouseover\",\n  \"mouseout\",\n  \"contextmenu\",\n  \"touchstart\",\n  \"touchend\",\n  \"touchcancel\",\n];\n","import mixin from \"./layerMixin\";\nimport layerEvents from \"../lib/layerEvents\";\n\nexport default {\n  name: \"ImageLayer\",\n  mixins: [ mixin ],\n\n  created() {\n    if (this.source) {\n      if (this.source.coordinates) {\n        this.$watch(\n          \"source.coordinates\",\n          function(next) {\n            if (this.initial) {\n              return;\n            }\n            if (next) {\n              this.mapSource.setCoordinates(next);\n            }\n          },\n          { deep: true },\n        );\n      }\n\n      if (this.source.url) {\n        this.$watch(\n          \"source.url\",\n          function(next) {\n            if (this.initial) {\n              return;\n            }\n            if (next) {\n              this.mapSource.updateImage({\n                url: next,\n                coordinates: this.source.coordinates,\n              });\n            }\n          },\n          { deep: true },\n        );\n      }\n    }\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      const source = {\n        type: \"image\",\n        ...this.source,\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      const layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        type: \"raster\",\n        ...this.layer,\n      };\n\n      console.log('$_addLayer, layer:', layer);\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    },\n  },\n};\n"],"sourceRoot":""}