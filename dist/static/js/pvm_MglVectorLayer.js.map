{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/VectorLayer.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js"],"names":["name","mixins","mixin","computed","getSourceFeatures","filter","map","querySourceFeatures","sourceId","sourceLayer","layer","getRenderedFeatures","geometry","queryRenderedFeatures","layers","layerId","watch","this","initial","setFilter","created","$_deferredMount","methods","source","type","on","$_watchSourceLoading","addSource","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","layerEvents","off","existed","getLayer","replace","$_emitEvent","removeLayer","id","addLayer","before","setFeatureState","featureId","state","params","getFeatureState","mapboxSourceProps","String","required","Object","default","undefined","mapboxLayerStyleProps","componentProps","clearSource","Boolean","withEvents","props","inject","data","sourceLoaded","isSourceLoaded","mapLayer","mapSource","getSource","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","keys","prop","setPaintProperty","deep","layout","setLayoutProperty","beforeDestroy","error","$_emitLayerMapEvent","event","$_emitMapEvent","events","$listeners","forEach","eventName","includes","$_unbindEvents","dataType","move","beforeId","moveLayer","remove","$destroy","render","$emit","component","mapboxEvent"],"mappings":"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","file":"static/js/pvm_MglVectorLayer.js","sourcesContent":["import layerEvents from \"../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"VectorLayer\",\n  mixins: [ mixin ],\n\n  computed: {\n    getSourceFeatures() {\n      return filter => {\n        if (this.map) {\n          return this.map.querySourceFeatures(this.sourceId, {\n            sourceLayer: this.layer[\"source-layer\"],\n            filter,\n          });\n        }\n        return null;\n      };\n    },\n\n    getRenderedFeatures() {\n      return (geometry, filter) => {\n        if (this.map) {\n          return this.map.queryRenderedFeatures(geometry, {\n            layers: [ this.layerId ],\n            filter,\n          });\n        }\n        return null;\n      };\n    },\n  },\n\n  watch: {\n    filter(filter) {\n      if (this.initial) {\n        return;\n      }\n      this.map.setFilter(this.layerId, filter);\n    },\n  },\n\n  created() {\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      let source = {\n        type: \"vector\",\n        ...this.source,\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        ...this.layer,\n      };\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    },\n\n    setFeatureState(featureId, state) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.sourceId,\n          \"source-layer\": this.layer[\"source-layer\"],\n        };\n        return this.map.setFeatureState(params, state);\n      }\n    },\n\n    getFeatureState(featureId) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source,\n          \"source-layer\": this.layer[\"source-layer\"],\n        };\n        return this.map.getFeatureState(params);\n      }\n    },\n  },\n};\n","// import withRegistration from \"../../lib/withRegistration\";\nimport withEvents from \"../lib/withEvents\";\n\nconst mapboxSourceProps = {\n  sourceId: {\n    type: String,\n    required: true,\n  },\n  source: {\n    type: [ Object, String ],\n    default: undefined,\n  },\n};\n\nconst mapboxLayerStyleProps = {\n  layerId: {\n    type: String,\n    required: true,\n  },\n  layer: {\n    type: Object,\n    required: true,\n  },\n  before: {\n    type: String,\n    default: undefined,\n  },\n};\n\nconst componentProps = {\n  clearSource: {\n    type: Boolean,\n    default: true,\n  },\n  replaceSource: {\n    type: Boolean,\n    default: false,\n  },\n  replace: {\n    type: Boolean,\n    default: false,\n  },\n};\n\nexport default {\n  mixins: [ withEvents ],\n  props: {\n    ...mapboxSourceProps,\n    ...mapboxLayerStyleProps,\n    ...componentProps,\n  },\n\n  inject: [ \"mapbox\", \"map\" ],\n\n  data() {\n    return {\n      initial: true,\n    };\n  },\n\n  computed: {\n    sourceLoaded() {\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\n    },\n    mapLayer() {\n      return this.map ? this.map.getLayer(this.layerId) : null;\n    },\n    mapSource() {\n      return this.map ? this.map.getSource(this.sourceId) : null;\n    },\n  },\n\n  created() {\n    if (this.layer.minzoom) {\n      this.$watch(\"layer.minzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\n      });\n    }\n\n    if (this.layer.maxzoom) {\n      this.$watch(\"layer.maxzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\n      });\n    }\n\n    if (this.layer.paint) {\n      this.$watch(\n        \"layer.paint\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.layout) {\n      this.$watch(\n        \"layer.layout\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.filter) {\n      this.$watch(\n        \"layer.filter\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          this.map.setFilter(this.layerId, next);\n        },\n        { deep: true },\n      );\n    }\n\n    // if (this.layer.tiles) {\n    //   this.$watch(\n    //     \"layer\",\n    //     function(next) {\n    //       console.log('watch layer tiles is firing, next:', next);\n    //       if (this.initial) return;\n    //       // this.map.removeLayer(this.layerId);\n    //       this.map.addLayer(next);\n    //       // this.map.setFilter(this.layerId, next);\n    //     },\n    //     { deep: true }\n    //   );\n    // }\n  },\n\n  beforeDestroy() {\n    // console.log('layerMixin beforeDestroy is running, this.layerId:', this.layerId, 'this.clearSource:', this.clearSource, 'this.map:', this.map, 'this.map.loaded():', this.map.loaded());\n    // if (this.map && this.map.loaded()) {\n    try {\n      // console.log('layerMixin beforeDestroy if map and maploaded try is running')\n      this.map.removeLayer(this.layerId);\n    } catch (err) {\n      // console.log('layerMixin beforeDestroy error 1 is running')\n      this.$_emitEvent(\"layer-does-not-exist\", {\n        layerId: this.sourceId,\n        error: err,\n      });\n    }\n    if (this.clearSource) {\n      // console.log('layerMixin beforeDestroy if clearSource is running')\n      try {\n        // console.log('layerMixin beforeDestroy if clearSource try is running');\n        this.map.removeSource(this.sourceId);\n      } catch (err) {\n        this.$_emitEvent(\"source-does-not-exist\", {\n          sourceId: this.sourceId,\n          error: err,\n        });\n      }\n    }\n    // }\n  },\n\n  methods: {\n    $_emitLayerMapEvent(event) {\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\n    },\n\n    $_bindLayerEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      if (this.map) {\n        events.forEach(eventName => {\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\n        });\n      }\n    },\n\n    $_watchSourceLoading(data) {\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      }\n    },\n\n    move(beforeId) {\n      this.map.moveLayer(this.layerId, beforeId);\n      this.$_emitEvent(\"layer-moved\", {\n        layerId: this.layerId,\n        beforeId: beforeId,\n      });\n    },\n\n    remove() {\n      this.map.removeLayer(this.layerId);\n      this.map.removeSource(this.sourceId);\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\n      this.$destroy();\n    },\n  },\n\n  render() {},\n};\n","export default {\n  methods: {\n    /**\n     * Emit Vue event with additional data\n     *\n     * @param {string} name EventName\n     * @param {Object} [data={}] Additional data\n     */\n    $_emitEvent(name, data = {}) {\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\n      this.$emit(name, {\n        map: this.map,\n        component: this,\n        ...data,\n      });\n    },\n\n    /**\n     * Emit Vue event with Mapbox event as additional data\n     *\n     * @param {Object} event\n     */\n    $_emitMapEvent(event, data = {}) {\n      // console.log('withEvents.js, $_emitMapEvent is running');\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\n    },\n  },\n};\n","export default [\n  \"mousedown\",\n  \"mouseup\",\n  \"click\",\n  \"dblclick\",\n  \"mousemove\",\n  \"mouseenter\",\n  \"mouseleave\",\n  \"mouseover\",\n  \"mouseout\",\n  \"contextmenu\",\n  \"touchstart\",\n  \"touchend\",\n  \"touchcancel\",\n];\n"],"sourceRoot":""}