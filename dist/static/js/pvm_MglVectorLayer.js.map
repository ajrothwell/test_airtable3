{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/VectorLayer.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js"],"names":["name","mixins","mixin","computed","getSourceFeatures","filter","map","querySourceFeatures","sourceId","sourceLayer","layer","getRenderedFeatures","geometry","queryRenderedFeatures","layers","layerId","watch","this","initial","setFilter","created","$_deferredMount","methods","source","type","on","$_watchSourceLoading","addSource","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","layerEvents","off","existed","getLayer","replace","$_emitEvent","removeLayer","id","addLayer","before","setFeatureState","featureId","state","params","getFeatureState","mapboxSourceProps","String","required","Object","default","undefined","mapboxLayerStyleProps","componentProps","clearSource","Boolean","withEvents","props","inject","data","sourceLoaded","isSourceLoaded","mapLayer","mapSource","getSource","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","keys","prop","setPaintProperty","deep","layout","setLayoutProperty","beforeDestroy","error","$_emitLayerMapEvent","event","$_emitMapEvent","events","$listeners","forEach","eventName","includes","$_unbindEvents","dataType","move","beforeId","moveLayer","remove","$destroy","render","$emit","component","mapboxEvent"],"mappings":"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","file":"static/js/pvm_MglVectorLayer.js","sourcesContent":["import layerEvents from \"../lib/layerEvents\";\r\nimport mixin from \"./layerMixin\";\r\n\r\nexport default {\r\n  name: \"VectorLayer\",\r\n  mixins: [ mixin ],\r\n\r\n  computed: {\r\n    getSourceFeatures() {\r\n      return filter => {\r\n        if (this.map) {\r\n          return this.map.querySourceFeatures(this.sourceId, {\r\n            sourceLayer: this.layer[\"source-layer\"],\r\n            filter,\r\n          });\r\n        }\r\n        return null;\r\n      };\r\n    },\r\n\r\n    getRenderedFeatures() {\r\n      return (geometry, filter) => {\r\n        if (this.map) {\r\n          return this.map.queryRenderedFeatures(geometry, {\r\n            layers: [ this.layerId ],\r\n            filter,\r\n          });\r\n        }\r\n        return null;\r\n      };\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    filter(filter) {\r\n      if (this.initial) {\r\n        return;\r\n      }\r\n      this.map.setFilter(this.layerId, filter);\r\n    },\r\n  },\r\n\r\n  created() {\r\n    this.$_deferredMount();\r\n  },\r\n\r\n  methods: {\r\n    $_deferredMount() {\r\n      let source = {\r\n        type: \"vector\",\r\n        ...this.source,\r\n      };\r\n\r\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\r\n      try {\r\n        this.map.addSource(this.sourceId, source);\r\n      } catch (err) {\r\n        if (this.replaceSource) {\r\n          this.map.removeSource(this.sourceId);\r\n          this.map.addSource(this.sourceId, source);\r\n        }\r\n      }\r\n      this.$_addLayer();\r\n      this.$_bindLayerEvents(layerEvents);\r\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\r\n      this.initial = false;\r\n    },\r\n\r\n    $_addLayer() {\r\n      let existed = this.map.getLayer(this.layerId);\r\n      if (existed) {\r\n        if (this.replace) {\r\n          this.map.removeLayer(this.layerId);\r\n        } else {\r\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\r\n          return existed;\r\n        }\r\n      }\r\n      let layer = {\r\n        id: this.layerId,\r\n        source: this.sourceId,\r\n        ...this.layer,\r\n      };\r\n\r\n      this.map.addLayer(layer, this.before);\r\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\r\n    },\r\n\r\n    setFeatureState(featureId, state) {\r\n      if (this.map) {\r\n        const params = {\r\n          id: featureId,\r\n          source: this.sourceId,\r\n          \"source-layer\": this.layer[\"source-layer\"],\r\n        };\r\n        return this.map.setFeatureState(params, state);\r\n      }\r\n    },\r\n\r\n    getFeatureState(featureId) {\r\n      if (this.map) {\r\n        const params = {\r\n          id: featureId,\r\n          source: this.source,\r\n          \"source-layer\": this.layer[\"source-layer\"],\r\n        };\r\n        return this.map.getFeatureState(params);\r\n      }\r\n    },\r\n  },\r\n};\r\n","// import withRegistration from \"../../lib/withRegistration\";\r\nimport withEvents from \"../lib/withEvents\";\r\n\r\nconst mapboxSourceProps = {\r\n  sourceId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  source: {\r\n    type: [ Object, String ],\r\n    default: undefined,\r\n  },\r\n};\r\n\r\nconst mapboxLayerStyleProps = {\r\n  layerId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  layer: {\r\n    type: Object,\r\n    required: true,\r\n  },\r\n  before: {\r\n    type: String,\r\n    default: undefined,\r\n  },\r\n};\r\n\r\nconst componentProps = {\r\n  clearSource: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n  replaceSource: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  replace: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n};\r\n\r\nexport default {\r\n  mixins: [ withEvents ],\r\n  props: {\r\n    ...mapboxSourceProps,\r\n    ...mapboxLayerStyleProps,\r\n    ...componentProps,\r\n  },\r\n\r\n  inject: [ \"mapbox\", \"map\" ],\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    sourceLoaded() {\r\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\r\n    },\r\n    mapLayer() {\r\n      return this.map ? this.map.getLayer(this.layerId) : null;\r\n    },\r\n    mapSource() {\r\n      return this.map ? this.map.getSource(this.sourceId) : null;\r\n    },\r\n  },\r\n\r\n  created() {\r\n    if (this.layer.minzoom) {\r\n      this.$watch(\"layer.minzoom\", function(next) {\r\n        if (this.initial) {\r\n          return;\r\n        }\r\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\r\n      });\r\n    }\r\n\r\n    if (this.layer.maxzoom) {\r\n      this.$watch(\"layer.maxzoom\", function(next) {\r\n        if (this.initial) {\r\n          return;\r\n        }\r\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\r\n      });\r\n    }\r\n\r\n    if (this.layer.paint) {\r\n      this.$watch(\r\n        \"layer.paint\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          if (next) {\r\n            for (let prop of Object.keys(next)) {\r\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\r\n            }\r\n          }\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    if (this.layer.layout) {\r\n      this.$watch(\r\n        \"layer.layout\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          if (next) {\r\n            for (let prop of Object.keys(next)) {\r\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\r\n            }\r\n          }\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    if (this.layer.filter) {\r\n      this.$watch(\r\n        \"layer.filter\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          this.map.setFilter(this.layerId, next);\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    // if (this.layer.tiles) {\r\n    //   this.$watch(\r\n    //     \"layer\",\r\n    //     function(next) {\r\n    //       console.log('watch layer tiles is firing, next:', next);\r\n    //       if (this.initial) return;\r\n    //       // this.map.removeLayer(this.layerId);\r\n    //       this.map.addLayer(next);\r\n    //       // this.map.setFilter(this.layerId, next);\r\n    //     },\r\n    //     { deep: true }\r\n    //   );\r\n    // }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // console.log('layerMixin beforeDestroy is running, this.layerId:', this.layerId, 'this.clearSource:', this.clearSource, 'this.map:', this.map, 'this.map.loaded():', this.map.loaded());\r\n    // if (this.map && this.map.loaded()) {\r\n    try {\r\n      // console.log('layerMixin beforeDestroy if map and maploaded try is running')\r\n      this.map.removeLayer(this.layerId);\r\n    } catch (err) {\r\n      // console.log('layerMixin beforeDestroy error 1 is running')\r\n      this.$_emitEvent(\"layer-does-not-exist\", {\r\n        layerId: this.sourceId,\r\n        error: err,\r\n      });\r\n    }\r\n    if (this.clearSource) {\r\n      // console.log('layerMixin beforeDestroy if clearSource is running')\r\n      try {\r\n        // console.log('layerMixin beforeDestroy if clearSource try is running');\r\n        this.map.removeSource(this.sourceId);\r\n      } catch (err) {\r\n        this.$_emitEvent(\"source-does-not-exist\", {\r\n          sourceId: this.sourceId,\r\n          error: err,\r\n        });\r\n      }\r\n    }\r\n    // }\r\n  },\r\n\r\n  methods: {\r\n    $_emitLayerMapEvent(event) {\r\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\r\n    },\r\n\r\n    $_bindLayerEvents(events) {\r\n      Object.keys(this.$listeners).forEach(eventName => {\r\n        if (events.includes(eventName)) {\r\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\r\n        }\r\n      });\r\n    },\r\n\r\n    $_unbindEvents(events) {\r\n      if (this.map) {\r\n        events.forEach(eventName => {\r\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\r\n        });\r\n      }\r\n    },\r\n\r\n    $_watchSourceLoading(data) {\r\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\r\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\r\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\r\n      }\r\n    },\r\n\r\n    move(beforeId) {\r\n      this.map.moveLayer(this.layerId, beforeId);\r\n      this.$_emitEvent(\"layer-moved\", {\r\n        layerId: this.layerId,\r\n        beforeId: beforeId,\r\n      });\r\n    },\r\n\r\n    remove() {\r\n      this.map.removeLayer(this.layerId);\r\n      this.map.removeSource(this.sourceId);\r\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\r\n      this.$destroy();\r\n    },\r\n  },\r\n\r\n  render() {},\r\n};\r\n","export default {\r\n  methods: {\r\n    /**\r\n     * Emit Vue event with additional data\r\n     *\r\n     * @param {string} name EventName\r\n     * @param {Object} [data={}] Additional data\r\n     */\r\n    $_emitEvent(name, data = {}) {\r\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\r\n      this.$emit(name, {\r\n        map: this.map,\r\n        component: this,\r\n        ...data,\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Emit Vue event with Mapbox event as additional data\r\n     *\r\n     * @param {Object} event\r\n     */\r\n    $_emitMapEvent(event, data = {}) {\r\n      // console.log('withEvents.js, $_emitMapEvent is running');\r\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\r\n    },\r\n  },\r\n};\r\n","export default [\r\n  \"mousedown\",\r\n  \"mouseup\",\r\n  \"click\",\r\n  \"dblclick\",\r\n  \"mousemove\",\r\n  \"mouseenter\",\r\n  \"mouseleave\",\r\n  \"mouseover\",\r\n  \"mouseout\",\r\n  \"contextmenu\",\r\n  \"touchstart\",\r\n  \"touchend\",\r\n  \"touchcancel\",\r\n];\r\n"],"sourceRoot":""}