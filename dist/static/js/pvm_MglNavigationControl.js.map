{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/withSelfEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/controls/NavigationControl.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/controls/controlMixin.js"],"names":["methods","$_emitSelfEvent","event","data","this","$_emitMapEvent","control","$_bindSelfEvents","events","emitter","Object","keys","$listeners","forEach","eventName","includes","on","$_unbindSelfEvents","length","off","name","mixins","controlMixin","props","showCompass","type","Boolean","default","showZoom","created","mapbox","NavigationControl","$props","$_addControl","$_emitEvent","$emit","map","component","mapboxEvent","withEvents","withSelfEvents","inject","position","String","beforeDestroy","removeControl","addControl","err","error","render"],"mappings":"8LAAe,QACbA,QAAS,CACPC,gBADO,SACSC,GAAkB,IAAXC,EAAW,uDAAJ,GAE5BC,KAAKC,eAAeH,EAApB,gBAA6BI,QAASF,KAAKE,SAAYH,KAMzDI,iBATO,SASUC,EAAQC,GAAS,WAChCC,OAAOC,KAAKP,KAAKQ,YAAYC,SAAQ,SAAAC,GAC/BN,EAAOO,SAASD,IAClBL,EAAQO,GAAGF,EAAW,EAAKb,qBAKjCgB,mBAjBO,SAiBYT,EAAQC,GAAS,WACZ,IAAlBD,EAAOU,QAGNT,GAGLD,EAAOK,SAAQ,SAAAC,GACbL,EAAQU,IAAIL,EAAW,EAAKb,wB,oCC1BpC,uBAEe,cACbmB,KAAM,oBACNC,OAAQ,CAAEC,QAEVC,MAAO,CACLC,YAAa,CACXC,KAAMC,QACNC,SAAS,GAEXC,SAAU,CACRH,KAAMC,QACNC,SAAS,IAIbE,QAfa,WAiBXzB,KAAKE,QAAU,IAAIF,KAAK0B,OAAOC,kBAAkB3B,KAAK4B,QACtD5B,KAAK6B,kB,8DCpBM,QACbjC,QAAS,CAOPkC,YAPO,SAOKd,GAAiB,IAAXjB,EAAW,uDAAJ,GAEvBC,KAAK+B,MAAMf,EAAX,gBACEgB,IAAKhC,KAAKgC,IACVC,UAAWjC,MACRD,KASPE,eArBO,SAqBQH,GAAkB,IAAXC,EAAW,uDAAJ,GAE3BC,KAAK8B,YAAYhC,EAAMuB,KAAvB,gBAA+Ba,YAAapC,GAAUC,Q,wECpB7C,QACbkB,OAAQ,CAAEkB,OAAYC,QAEtBC,OAAQ,CAAE,SAAU,MAAO,WAE3BlB,MAAO,CACLmB,SAAU,CACRjB,KAAMkB,OACNhB,QAAS,cAIbiB,cAZa,WAaPxC,KAAKgC,KAAOhC,KAAKE,SACnBF,KAAKgC,IAAIS,cAAczC,KAAKE,UAIhCN,QAAS,CACPiC,aADO,WAEL,IACE7B,KAAKgC,IAAIU,WAAW1C,KAAKE,QAASF,KAAKsC,UACvC,MAAOK,GAEP,YADA3C,KAAK8B,YAAY,QAAS,CAAEc,MAAOD,IAGrC3C,KAAK8B,YAAY,QAAS,CAAE5B,QAASF,KAAKE,YAI9C2C,OA9Ba","file":"static/js/pvm_MglNavigationControl.js","sourcesContent":["export default {\n  methods: {\n    $_emitSelfEvent(event, data = {}) {\n      // console.log('withSelfEvents.js, $emitSelfEvent is running');\n      this.$_emitMapEvent(event, { control: this.control, ...data });\n    },\n    /** Bind events for markers, popups and controls.\n     * MapboxGL JS emits this events on popup or marker object,\n     * so we treat them as 'self' events of these objects\n     */\n    $_bindSelfEvents(events, emitter) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          emitter.on(eventName, this.$_emitSelfEvent);\n        }\n      });\n    },\n\n    $_unbindSelfEvents(events, emitter) {\n      if (events.length === 0) {\n        return;\n      }\n      if (!emitter) {\n        return;\n      }\n      events.forEach(eventName => {\n        emitter.off(eventName, this.$_emitSelfEvent);\n      });\n    },\n  },\n};\n","import controlMixin from \"./controlMixin\";\n\nexport default {\n  name: \"NavigationControl\",\n  mixins: [ controlMixin ],\n\n  props: {\n    showCompass: {\n      type: Boolean,\n      default: true,\n    },\n    showZoom: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  created() {\n    // console.log('NavigationControl created, this.mapbox:', this.mapbox);\n    this.control = new this.mapbox.NavigationControl(this.$props);\n    this.$_addControl();\n  },\n};\n","export default {\n  methods: {\n    /**\n     * Emit Vue event with additional data\n     *\n     * @param {string} name EventName\n     * @param {Object} [data={}] Additional data\n     */\n    $_emitEvent(name, data = {}) {\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\n      this.$emit(name, {\n        map: this.map,\n        component: this,\n        ...data,\n      });\n    },\n\n    /**\n     * Emit Vue event with Mapbox event as additional data\n     *\n     * @param {Object} event\n     */\n    $_emitMapEvent(event, data = {}) {\n      // console.log('withEvents.js, $_emitMapEvent is running');\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\n    },\n  },\n};\n","// import withRegistration from \"../../../lib/withRegistration\";\nimport withEvents from \"../../lib/withEvents\";\nimport withSelfEvents from \"../withSelfEvents\";\n\nexport default {\n  mixins: [ withEvents, withSelfEvents ],\n\n  inject: [ \"mapbox\", \"map\", \"actions\" ],\n\n  props: {\n    position: {\n      type: String,\n      default: \"top-right\",\n    },\n  },\n\n  beforeDestroy() {\n    if (this.map && this.control) {\n      this.map.removeControl(this.control);\n    }\n  },\n\n  methods: {\n    $_addControl() {\n      try {\n        this.map.addControl(this.control, this.position);\n      } catch (err) {\n        this.$_emitEvent(\"error\", { error: err });\n        return;\n      }\n      this.$_emitEvent(\"added\", { control: this.control });\n    },\n  },\n\n  render() {},\n};\n"],"sourceRoot":""}