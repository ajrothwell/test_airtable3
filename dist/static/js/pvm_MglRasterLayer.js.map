{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/RasterLayer.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js"],"names":["name","mixins","mixin","created","this","$_deferredMount","methods","source","type","map","on","$_watchSourceLoading","addSource","sourceId","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","layerEvents","off","initial","existed","getLayer","layerId","console","log","before","replace","$_emitEvent","removeLayer","layer","id","addLayer","mapboxSourceProps","String","required","Object","default","undefined","mapboxLayerStyleProps","componentProps","clearSource","Boolean","withEvents","props","inject","data","computed","sourceLoaded","isSourceLoaded","mapLayer","mapSource","getSource","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","keys","prop","setPaintProperty","deep","layout","setLayoutProperty","filter","setFilter","beforeDestroy","error","$_emitLayerMapEvent","event","$_emitMapEvent","events","$listeners","forEach","eventName","includes","$_unbindEvents","dataType","move","beforeId","moveLayer","remove","$destroy","render","$emit","component","mapboxEvent"],"mappings":"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","file":"static/js/pvm_MglRasterLayer.js","sourcesContent":["import layerEvents from \"../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"RasterLayer\",\n  mixins: [ mixin ],\n\n  created() {\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      let source = {\n        type: \"raster\",\n        ...this.source,\n      };\n\n      // console.log('in RasterLayer.js, source:', source, 'this:', this);\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        // console.log('in RasterLayer.js try, this.sourceId:', this.sourceId, 'source:', source);\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      console.log('RasterLayer.js $_addLayer is running, this:', this, 'this.layerId:', this.layerId, 'this.before:', this.before, 'this.map:', this.map, 'existed:', existed);\n      if (existed) {\n        if (this.replace) {\n          // console.log('RasterLayer.js if if replace is running')\n          this.map.removeLayer(this.layerId);\n        } else {\n          // console.log('RasterLayer.js if else is running, this.layerId:', this.layerId);\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        type: \"raster\",\n        source: this.sourceId,\n        ...this.layer,\n      };\n\n      // console.log('RasterLayer.js end is running');\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    },\n  },\n};\n","// import withRegistration from \"../../lib/withRegistration\";\nimport withEvents from \"../lib/withEvents\";\n\nconst mapboxSourceProps = {\n  sourceId: {\n    type: String,\n    required: true,\n  },\n  source: {\n    type: [ Object, String ],\n    default: undefined,\n  },\n};\n\nconst mapboxLayerStyleProps = {\n  layerId: {\n    type: String,\n    required: true,\n  },\n  layer: {\n    type: Object,\n    required: true,\n  },\n  before: {\n    type: String,\n    default: undefined,\n  },\n};\n\nconst componentProps = {\n  clearSource: {\n    type: Boolean,\n    default: true,\n  },\n  replaceSource: {\n    type: Boolean,\n    default: false,\n  },\n  replace: {\n    type: Boolean,\n    default: false,\n  },\n};\n\nexport default {\n  mixins: [ withEvents ],\n  props: {\n    ...mapboxSourceProps,\n    ...mapboxLayerStyleProps,\n    ...componentProps,\n  },\n\n  inject: [ \"mapbox\", \"map\" ],\n\n  data() {\n    return {\n      initial: true,\n    };\n  },\n\n  computed: {\n    sourceLoaded() {\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\n    },\n    mapLayer() {\n      return this.map ? this.map.getLayer(this.layerId) : null;\n    },\n    mapSource() {\n      return this.map ? this.map.getSource(this.sourceId) : null;\n    },\n  },\n\n  created() {\n    if (this.layer.minzoom) {\n      this.$watch(\"layer.minzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\n      });\n    }\n\n    if (this.layer.maxzoom) {\n      this.$watch(\"layer.maxzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\n      });\n    }\n\n    if (this.layer.paint) {\n      this.$watch(\n        \"layer.paint\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.layout) {\n      this.$watch(\n        \"layer.layout\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.filter) {\n      this.$watch(\n        \"layer.filter\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          this.map.setFilter(this.layerId, next);\n        },\n        { deep: true },\n      );\n    }\n\n    // if (this.layer.tiles) {\n    //   this.$watch(\n    //     \"layer\",\n    //     function(next) {\n    //       console.log('watch layer tiles is firing, next:', next);\n    //       if (this.initial) return;\n    //       // this.map.removeLayer(this.layerId);\n    //       this.map.addLayer(next);\n    //       // this.map.setFilter(this.layerId, next);\n    //     },\n    //     { deep: true }\n    //   );\n    // }\n  },\n\n  beforeDestroy() {\n    // console.log('layerMixin beforeDestroy is running, this.layerId:', this.layerId, 'this.clearSource:', this.clearSource, 'this.map:', this.map, 'this.map.loaded():', this.map.loaded());\n    // if (this.map && this.map.loaded()) {\n    try {\n      // console.log('layerMixin beforeDestroy if map and maploaded try is running')\n      this.map.removeLayer(this.layerId);\n    } catch (err) {\n      // console.log('layerMixin beforeDestroy error 1 is running')\n      this.$_emitEvent(\"layer-does-not-exist\", {\n        layerId: this.sourceId,\n        error: err,\n      });\n    }\n    if (this.clearSource) {\n      // console.log('layerMixin beforeDestroy if clearSource is running')\n      try {\n        // console.log('layerMixin beforeDestroy if clearSource try is running');\n        this.map.removeSource(this.sourceId);\n      } catch (err) {\n        this.$_emitEvent(\"source-does-not-exist\", {\n          sourceId: this.sourceId,\n          error: err,\n        });\n      }\n    }\n    // }\n  },\n\n  methods: {\n    $_emitLayerMapEvent(event) {\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\n    },\n\n    $_bindLayerEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      if (this.map) {\n        events.forEach(eventName => {\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\n        });\n      }\n    },\n\n    $_watchSourceLoading(data) {\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      }\n    },\n\n    move(beforeId) {\n      this.map.moveLayer(this.layerId, beforeId);\n      this.$_emitEvent(\"layer-moved\", {\n        layerId: this.layerId,\n        beforeId: beforeId,\n      });\n    },\n\n    remove() {\n      this.map.removeLayer(this.layerId);\n      this.map.removeSource(this.sourceId);\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\n      this.$destroy();\n    },\n  },\n\n  render() {},\n};\n","export default {\n  methods: {\n    /**\n     * Emit Vue event with additional data\n     *\n     * @param {string} name EventName\n     * @param {Object} [data={}] Additional data\n     */\n    $_emitEvent(name, data = {}) {\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\n      this.$emit(name, {\n        map: this.map,\n        component: this,\n        ...data,\n      });\n    },\n\n    /**\n     * Emit Vue event with Mapbox event as additional data\n     *\n     * @param {Object} event\n     */\n    $_emitMapEvent(event, data = {}) {\n      // console.log('withEvents.js, $_emitMapEvent is running');\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\n    },\n  },\n};\n","export default [\n  \"mousedown\",\n  \"mouseup\",\n  \"click\",\n  \"dblclick\",\n  \"mousemove\",\n  \"mouseenter\",\n  \"mouseleave\",\n  \"mouseover\",\n  \"mouseout\",\n  \"contextmenu\",\n  \"touchstart\",\n  \"touchend\",\n  \"touchcancel\",\n];\n"],"sourceRoot":""}