{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/RasterLayer.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js"],"names":["name","mixins","mixin","created","this","$_deferredMount","methods","source","type","map","on","$_watchSourceLoading","addSource","sourceId","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","layerEvents","off","initial","existed","getLayer","layerId","console","log","before","replace","$_emitEvent","removeLayer","layer","id","addLayer","mapboxSourceProps","String","required","Object","default","undefined","mapboxLayerStyleProps","componentProps","clearSource","Boolean","withEvents","props","inject","data","computed","sourceLoaded","isSourceLoaded","mapLayer","mapSource","getSource","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","keys","prop","setPaintProperty","deep","layout","setLayoutProperty","filter","setFilter","beforeDestroy","error","$_emitLayerMapEvent","event","$_emitMapEvent","events","$listeners","forEach","eventName","includes","$_unbindEvents","dataType","move","beforeId","moveLayer","remove","$destroy","render","$emit","component","mapboxEvent"],"mappings":"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","file":"static/js/pvm_MglRasterLayer.js","sourcesContent":["import layerEvents from \"../lib/layerEvents\";\r\nimport mixin from \"./layerMixin\";\r\n\r\nexport default {\r\n  name: \"RasterLayer\",\r\n  mixins: [ mixin ],\r\n\r\n  created() {\r\n    this.$_deferredMount();\r\n  },\r\n\r\n  methods: {\r\n    $_deferredMount() {\r\n      let source = {\r\n        type: \"raster\",\r\n        ...this.source,\r\n      };\r\n\r\n      // console.log('in RasterLayer.js, source:', source, 'this:', this);\r\n\r\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\r\n      try {\r\n        // console.log('in RasterLayer.js try, this.sourceId:', this.sourceId, 'source:', source);\r\n        this.map.addSource(this.sourceId, source);\r\n      } catch (err) {\r\n        if (this.replaceSource) {\r\n          this.map.removeSource(this.sourceId);\r\n          this.map.addSource(this.sourceId, source);\r\n        }\r\n      }\r\n      this.$_addLayer();\r\n      this.$_bindLayerEvents(layerEvents);\r\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\r\n      this.initial = false;\r\n    },\r\n\r\n    $_addLayer() {\r\n      let existed = this.map.getLayer(this.layerId);\r\n      console.log('RasterLayer.js $_addLayer is running, this:', this, 'this.layerId:', this.layerId, 'this.before:', this.before, 'this.map:', this.map, 'existed:', existed);\r\n      if (existed) {\r\n        if (this.replace) {\r\n          // console.log('RasterLayer.js if if replace is running')\r\n          this.map.removeLayer(this.layerId);\r\n        } else {\r\n          // console.log('RasterLayer.js if else is running, this.layerId:', this.layerId);\r\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\r\n          return existed;\r\n        }\r\n      }\r\n      let layer = {\r\n        id: this.layerId,\r\n        type: \"raster\",\r\n        source: this.sourceId,\r\n        ...this.layer,\r\n      };\r\n\r\n      // console.log('RasterLayer.js end is running');\r\n\r\n      this.map.addLayer(layer, this.before);\r\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\r\n    },\r\n  },\r\n};\r\n","// import withRegistration from \"../../lib/withRegistration\";\r\nimport withEvents from \"../lib/withEvents\";\r\n\r\nconst mapboxSourceProps = {\r\n  sourceId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  source: {\r\n    type: [ Object, String ],\r\n    default: undefined,\r\n  },\r\n};\r\n\r\nconst mapboxLayerStyleProps = {\r\n  layerId: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  layer: {\r\n    type: Object,\r\n    required: true,\r\n  },\r\n  before: {\r\n    type: String,\r\n    default: undefined,\r\n  },\r\n};\r\n\r\nconst componentProps = {\r\n  clearSource: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n  replaceSource: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  replace: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n};\r\n\r\nexport default {\r\n  mixins: [ withEvents ],\r\n  props: {\r\n    ...mapboxSourceProps,\r\n    ...mapboxLayerStyleProps,\r\n    ...componentProps,\r\n  },\r\n\r\n  inject: [ \"mapbox\", \"map\" ],\r\n\r\n  data() {\r\n    return {\r\n      initial: true,\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    sourceLoaded() {\r\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\r\n    },\r\n    mapLayer() {\r\n      return this.map ? this.map.getLayer(this.layerId) : null;\r\n    },\r\n    mapSource() {\r\n      return this.map ? this.map.getSource(this.sourceId) : null;\r\n    },\r\n  },\r\n\r\n  created() {\r\n    if (this.layer.minzoom) {\r\n      this.$watch(\"layer.minzoom\", function(next) {\r\n        if (this.initial) {\r\n          return;\r\n        }\r\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\r\n      });\r\n    }\r\n\r\n    if (this.layer.maxzoom) {\r\n      this.$watch(\"layer.maxzoom\", function(next) {\r\n        if (this.initial) {\r\n          return;\r\n        }\r\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\r\n      });\r\n    }\r\n\r\n    if (this.layer.paint) {\r\n      this.$watch(\r\n        \"layer.paint\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          if (next) {\r\n            for (let prop of Object.keys(next)) {\r\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\r\n            }\r\n          }\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    if (this.layer.layout) {\r\n      this.$watch(\r\n        \"layer.layout\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          if (next) {\r\n            for (let prop of Object.keys(next)) {\r\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\r\n            }\r\n          }\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    if (this.layer.filter) {\r\n      this.$watch(\r\n        \"layer.filter\",\r\n        function(next) {\r\n          if (this.initial) {\r\n            return;\r\n          }\r\n          this.map.setFilter(this.layerId, next);\r\n        },\r\n        { deep: true },\r\n      );\r\n    }\r\n\r\n    // if (this.layer.tiles) {\r\n    //   this.$watch(\r\n    //     \"layer\",\r\n    //     function(next) {\r\n    //       console.log('watch layer tiles is firing, next:', next);\r\n    //       if (this.initial) return;\r\n    //       // this.map.removeLayer(this.layerId);\r\n    //       this.map.addLayer(next);\r\n    //       // this.map.setFilter(this.layerId, next);\r\n    //     },\r\n    //     { deep: true }\r\n    //   );\r\n    // }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // console.log('layerMixin beforeDestroy is running, this.layerId:', this.layerId, 'this.clearSource:', this.clearSource, 'this.map:', this.map, 'this.map.loaded():', this.map.loaded());\r\n    // if (this.map && this.map.loaded()) {\r\n    try {\r\n      // console.log('layerMixin beforeDestroy if map and maploaded try is running')\r\n      this.map.removeLayer(this.layerId);\r\n    } catch (err) {\r\n      // console.log('layerMixin beforeDestroy error 1 is running')\r\n      this.$_emitEvent(\"layer-does-not-exist\", {\r\n        layerId: this.sourceId,\r\n        error: err,\r\n      });\r\n    }\r\n    if (this.clearSource) {\r\n      // console.log('layerMixin beforeDestroy if clearSource is running')\r\n      try {\r\n        // console.log('layerMixin beforeDestroy if clearSource try is running');\r\n        this.map.removeSource(this.sourceId);\r\n      } catch (err) {\r\n        this.$_emitEvent(\"source-does-not-exist\", {\r\n          sourceId: this.sourceId,\r\n          error: err,\r\n        });\r\n      }\r\n    }\r\n    // }\r\n  },\r\n\r\n  methods: {\r\n    $_emitLayerMapEvent(event) {\r\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\r\n    },\r\n\r\n    $_bindLayerEvents(events) {\r\n      Object.keys(this.$listeners).forEach(eventName => {\r\n        if (events.includes(eventName)) {\r\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\r\n        }\r\n      });\r\n    },\r\n\r\n    $_unbindEvents(events) {\r\n      if (this.map) {\r\n        events.forEach(eventName => {\r\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\r\n        });\r\n      }\r\n    },\r\n\r\n    $_watchSourceLoading(data) {\r\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\r\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\r\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\r\n      }\r\n    },\r\n\r\n    move(beforeId) {\r\n      this.map.moveLayer(this.layerId, beforeId);\r\n      this.$_emitEvent(\"layer-moved\", {\r\n        layerId: this.layerId,\r\n        beforeId: beforeId,\r\n      });\r\n    },\r\n\r\n    remove() {\r\n      this.map.removeLayer(this.layerId);\r\n      this.map.removeSource(this.sourceId);\r\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\r\n      this.$destroy();\r\n    },\r\n  },\r\n\r\n  render() {},\r\n};\r\n","export default {\r\n  methods: {\r\n    /**\r\n     * Emit Vue event with additional data\r\n     *\r\n     * @param {string} name EventName\r\n     * @param {Object} [data={}] Additional data\r\n     */\r\n    $_emitEvent(name, data = {}) {\r\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\r\n      this.$emit(name, {\r\n        map: this.map,\r\n        component: this,\r\n        ...data,\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Emit Vue event with Mapbox event as additional data\r\n     *\r\n     * @param {Object} event\r\n     */\r\n    $_emitMapEvent(event, data = {}) {\r\n      // console.log('withEvents.js, $_emitMapEvent is running');\r\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\r\n    },\r\n  },\r\n};\r\n","export default [\r\n  \"mousedown\",\r\n  \"mouseup\",\r\n  \"click\",\r\n  \"dblclick\",\r\n  \"mousemove\",\r\n  \"mouseenter\",\r\n  \"mouseleave\",\r\n  \"mouseover\",\r\n  \"mouseout\",\r\n  \"contextmenu\",\r\n  \"touchstart\",\r\n  \"touchend\",\r\n  \"touchcancel\",\r\n];\r\n"],"sourceRoot":""}