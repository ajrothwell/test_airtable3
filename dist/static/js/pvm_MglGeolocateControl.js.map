{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/controls/GeolocateControl.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/withSelfEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/controls/controlMixin.js"],"names":["geolocationEvents","trackuserlocationstart","trackuserlocationend","geolocate","error","name","mixins","withEvents","withSelfEvents","controlMixin","props","positionOptions","type","Object","default","enableHighAccuracy","timeout","fitBoundsOptions","maxZoom","trackUserLocation","Boolean","showUserLocation","created","GeolocateControl","this","mapbox","control","$props","$_addControl","$_bindSelfEvents","keys","methods","trigger","$_emitSelfEvent","event","data","$_emitMapEvent","events","emitter","$listeners","forEach","eventName","includes","on","$_unbindSelfEvents","length","off","$_emitEvent","$emit","map","component","mapboxEvent","inject","position","String","beforeDestroy","removeControl","addControl","err","render"],"mappings":"oLAIMA,EAAoB,CACxBC,uBAAwB,yBACxBC,qBAAsB,uBACtBC,UAAW,YACXC,MAAO,SAGM,cACbC,KAAM,mBACNC,OAAQ,CAAEC,OAAYC,OAAgBC,QAEtCC,MAAO,CACLC,gBAAiB,CACfC,KAAMC,OACNC,QAFe,WAGb,MAAO,CACLC,oBAAoB,EACpBC,QAAS,OAIfC,iBAAkB,CAChBL,KAAMC,OACNC,QAAS,iBAAO,CAAEI,QAAS,MAE7BC,kBAAmB,CACjBP,KAAMQ,QACNN,SAAS,GAEXO,iBAAkB,CAChBT,KAAMQ,QACNN,SAAS,IAIbQ,QA5Ba,WA6BX,IAAMC,EAAmBC,KAAKC,OAAOF,iBACrCC,KAAKE,QAAU,IAAIH,EAAiBC,KAAKG,QACzCH,KAAKI,eACLJ,KAAKK,iBAAiBhB,OAAOiB,KAAK9B,GAAoBwB,KAAKE,UAG7DK,QAAS,CACPC,QADO,WAEL,GAAIR,KAAKE,QACP,OAAOF,KAAKE,QAAQM,c,sGCjDb,QACbD,QAAS,CACPE,gBADO,SACSC,GAAkB,IAAXC,EAAW,uDAAJ,GAE5BX,KAAKY,eAAeF,EAApB,gBAA6BR,QAASF,KAAKE,SAAYS,KAMzDN,iBATO,SASUQ,EAAQC,GAAS,WAChCzB,OAAOiB,KAAKN,KAAKe,YAAYC,SAAQ,SAAAC,GAC/BJ,EAAOK,SAASD,IAClBH,EAAQK,GAAGF,EAAW,EAAKR,qBAKjCW,mBAjBO,SAiBYP,EAAQC,GAAS,WACZ,IAAlBD,EAAOQ,QAGNP,GAGLD,EAAOG,SAAQ,SAAAC,GACbH,EAAQQ,IAAIL,EAAW,EAAKR,wB,8DC1BrB,QACbF,QAAS,CAOPgB,YAPO,SAOK1C,GAAiB,IAAX8B,EAAW,uDAAJ,GAEvBX,KAAKwB,MAAM3C,EAAX,gBACE4C,IAAKzB,KAAKyB,IACVC,UAAW1B,MACRW,KASPC,eArBO,SAqBQF,GAAkB,IAAXC,EAAW,uDAAJ,GAE3BX,KAAKuB,YAAYb,EAAMtB,KAAvB,gBAA+BuC,YAAajB,GAAUC,Q,wECpB7C,QACb7B,OAAQ,CAAEC,OAAYC,QAEtB4C,OAAQ,CAAE,SAAU,MAAO,WAE3B1C,MAAO,CACL2C,SAAU,CACRzC,KAAM0C,OACNxC,QAAS,cAIbyC,cAZa,WAaP/B,KAAKyB,KAAOzB,KAAKE,SACnBF,KAAKyB,IAAIO,cAAchC,KAAKE,UAIhCK,QAAS,CACPH,aADO,WAEL,IACEJ,KAAKyB,IAAIQ,WAAWjC,KAAKE,QAASF,KAAK6B,UACvC,MAAOK,GAEP,YADAlC,KAAKuB,YAAY,QAAS,CAAE3C,MAAOsD,IAGrClC,KAAKuB,YAAY,QAAS,CAAErB,QAASF,KAAKE,YAI9CiC,OA9Ba","file":"static/js/pvm_MglGeolocateControl.js","sourcesContent":["import controlMixin from \"./controlMixin\";\nimport withEvents from \"../../lib/withEvents\";\nimport withSelfEvents from \"../withSelfEvents\";\n\nconst geolocationEvents = {\n  trackuserlocationstart: \"trackuserlocationstart\",\n  trackuserlocationend: \"trackuserlocationend\",\n  geolocate: \"geolocate\",\n  error: \"error\",\n};\n\nexport default {\n  name: \"GeolocateControl\",\n  mixins: [ withEvents, withSelfEvents, controlMixin ],\n\n  props: {\n    positionOptions: {\n      type: Object,\n      default() {\n        return {\n          enableHighAccuracy: false,\n          timeout: 6000,\n        };\n      },\n    },\n    fitBoundsOptions: {\n      type: Object,\n      default: () => ({ maxZoom: 15 }),\n    },\n    trackUserLocation: {\n      type: Boolean,\n      default: false,\n    },\n    showUserLocation: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  created() {\n    const GeolocateControl = this.mapbox.GeolocateControl;\n    this.control = new GeolocateControl(this.$props);\n    this.$_addControl();\n    this.$_bindSelfEvents(Object.keys(geolocationEvents), this.control);\n  },\n\n  methods: {\n    trigger() {\n      if (this.control) {\n        return this.control.trigger();\n      }\n    },\n  },\n};\n","export default {\n  methods: {\n    $_emitSelfEvent(event, data = {}) {\n      // console.log('withSelfEvents.js, $emitSelfEvent is running');\n      this.$_emitMapEvent(event, { control: this.control, ...data });\n    },\n    /** Bind events for markers, popups and controls.\n     * MapboxGL JS emits this events on popup or marker object,\n     * so we treat them as 'self' events of these objects\n     */\n    $_bindSelfEvents(events, emitter) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          emitter.on(eventName, this.$_emitSelfEvent);\n        }\n      });\n    },\n\n    $_unbindSelfEvents(events, emitter) {\n      if (events.length === 0) {\n        return;\n      }\n      if (!emitter) {\n        return;\n      }\n      events.forEach(eventName => {\n        emitter.off(eventName, this.$_emitSelfEvent);\n      });\n    },\n  },\n};\n","export default {\n  methods: {\n    /**\n     * Emit Vue event with additional data\n     *\n     * @param {string} name EventName\n     * @param {Object} [data={}] Additional data\n     */\n    $_emitEvent(name, data = {}) {\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\n      this.$emit(name, {\n        map: this.map,\n        component: this,\n        ...data,\n      });\n    },\n\n    /**\n     * Emit Vue event with Mapbox event as additional data\n     *\n     * @param {Object} event\n     */\n    $_emitMapEvent(event, data = {}) {\n      // console.log('withEvents.js, $_emitMapEvent is running');\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\n    },\n  },\n};\n","// import withRegistration from \"../../../lib/withRegistration\";\nimport withEvents from \"../../lib/withEvents\";\nimport withSelfEvents from \"../withSelfEvents\";\n\nexport default {\n  mixins: [ withEvents, withSelfEvents ],\n\n  inject: [ \"mapbox\", \"map\", \"actions\" ],\n\n  props: {\n    position: {\n      type: String,\n      default: \"top-right\",\n    },\n  },\n\n  beforeDestroy() {\n    if (this.map && this.control) {\n      this.map.removeControl(this.control);\n    }\n  },\n\n  methods: {\n    $_addControl() {\n      try {\n        this.map.addControl(this.control, this.position);\n      } catch (err) {\n        this.$_emitEvent(\"error\", { error: err });\n        return;\n      }\n      this.$_emitEvent(\"added\", { control: this.control });\n    },\n  },\n\n  render() {},\n};\n"],"sourceRoot":""}